# ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ #
# ðŸ’¥                                                                        ðŸ’¥ #
# ðŸ’¥ Do not edit this file as it will be overwritten!                       ðŸ’¥ #
# ðŸ’¥                                                                        ðŸ’¥ #
# ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ #

SHELL := bash

TF_UPGRADE_BRANCH ?= main
TF_UPGRADE_TMP    ?= tmp

ENV ?= default


export TF_DATA_DIR=.terraform_$(ENV)


.PHONY: all
all:


.PHONY: create
create:
	mkdir -p \
		env

# create _backend.tf from template
ifeq (,$(wildcard _backend.tf))
ifndef APP_NAME
	$(error APP_NAME required)
endif
	sed "s/APP_NAME/$(APP_NAME)/g" _backend.tf.sample > _backend.tf
endif

# make sure env-tfvars exist
	touch 'env/$(ENV).tfvars'

# cleanups
ifneq (,$(findstring /infra,$(PWD)))
	rm -rf .git README.md Jenkinsfile *.sample
endif


.PHONY: upgrade
upgrade:
ifeq ($(TF_UPGRADE_TMP),)
	exit 1
endif
	rm -rf $(TF_UPGRADE_TMP)

	git clone --depth 1 --single-branch -b '$(TF_UPGRADE_BRANCH)' https://devserv1.net/scm/gruen/tf-common.git '$(TF_UPGRADE_TMP)'

	cp -f '$(TF_UPGRADE_TMP)'/*.tf '$(TF_UPGRADE_TMP)'/{Makefile,.gitignore,.terraform.lock.hcl,.terraform-version,.editorconfig} '$(CURDIR)'/
	rm -rf '$(TF_UPGRADE_TMP)'

	terraform init -upgrade
	terraform fmt


.PHONY: lock
lock:
	terraform init -upgrade
	rm '$(CURDIR)'/.terraform.lock.hcl
	terraform providers lock -platform=darwin_amd64 -platform=linux_amd64 -platform=windows_amd64


.PHONY: init
init: check-env
	terraform init

	if ! terraform workspace select '$(ENV)' 2> /dev/null; then \
		terraform workspace new '$(ENV)' ;\
	fi


.PHONY: plan
plan: check-env
	terraform plan  \
		-lock-timeout=600s \
		-var-file='env/$(ENV).tfvars' \
		-out '$(ENV).plan'


.PHONY: apply
apply: check-env
	terraform apply \
		-lock-timeout=600s \
		'$(ENV).plan'


.PHONY: destroy
destroy: check-env
	terraform destroy  \
		-var-file='env/$(ENV).tfvars'


.PHONY: state-push
state-push: check-env
	terraform state push '$(ENV).tfstate'


.PHONY: state-pull
state-pull: check-env
	terraform state pull > '$(ENV).tfstate'


.PHONY: import
import: check-env
	terraform import -lock-timeout=600s '$(ADDR)' '$(ID)'


.PHONY: rm
rm: check-env
	terraform state rm -lock-timeout=600s '$(ADDR)'


.PHONY: fmt
fmt:
	terraform fmt


.PHONY: get
get:
	terraform get


.PHONY: state-replace-provider
state-replace-provider: check-env
	terraform state replace-provider -- -/aws hashicorp/aws
	terraform state replace-provider -- -/null hashicorp/null
	terraform state replace-provider -- -/random hashicorp/random
	terraform state replace-provider -- -/docker terraform-providers/docker
	terraform state replace-provider -- -/cloudflare cloudflare/cloudflare
	terraform state replace-provider -- terraform-providers/docker kreuzwerker/docker
	terraform state replace-provider hashicorp/oci oracle/oci


.PHONY: check-env
check-env:
ifndef ENV
	$(error ENV is undefined)
endif
ifeq ($(wildcard $(CURDIR)/env/$(ENV).tfvars),)
	$(error ENV does not exist)
endif
